basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.RemoteResponse:
    properties:
      remoteName:
        type: string
      remoteURL:
        type: string
      version:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      status:
        type: string
    type: object
  remote.PushRemoteRequest:
    properties:
      baseUrl:
        type: string
      remoteName:
        type: string
      version:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for timekeeper backend.
  title: Timekeeper Backend API
  version: "1.0"
paths:
  /dashboard:
    get:
      consumes:
      - application/json
      description: Get all remotes or remotes by name
      parameters:
      - description: Remote Name
        in: query
        name: remoteName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RemoteResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all remotes or remotes by name
      tags:
      - remote
  /get-remote:
    get:
      consumes:
      - application/json
      description: Get a remote by name and version
      parameters:
      - description: Remote Name
        in: query
        name: remoteName
        required: true
        type: string
      - description: Version
        in: query
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RemoteResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a remote by name and version
      tags:
      - remote
  /health-check:
    get:
      description: Returns the status of the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
      summary: Health check endpoint
      tags:
      - health
  /push-remote:
    post:
      consumes:
      - application/json
      description: Push a new remote
      parameters:
      - description: Remote
        in: body
        name: remote
        required: true
        schema:
          $ref: '#/definitions/remote.PushRemoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RemoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Push a new remote
      tags:
      - remote
swagger: "2.0"
